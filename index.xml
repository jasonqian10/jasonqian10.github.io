<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>知不道</title>
    <link>https://jasonqian10.github.io/</link>
    <description>Recent content on 知不道</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 22 Jun 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jasonqian10.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>【solr配置】stored、docValues区别和使用场景</title>
      <link>https://jasonqian10.github.io/post/solr/solr-docvalues-stored/</link>
      <pubDate>Mon, 22 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jasonqian10.github.io/post/solr/solr-docvalues-stored/</guid>
      <description>&lt;h3 id=&#34;stored与docvalues&#34;&gt;stored与DocValues&lt;/h3&gt;

&lt;p&gt;stored存储与docValues存储其实都是&lt;strong&gt;正排索引&lt;/strong&gt;，但是两者有区别：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【Java集合框架】看这一篇就够了</title>
      <link>https://jasonqian10.github.io/post/java/java-collection/</link>
      <pubDate>Thu, 16 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jasonqian10.github.io/post/java/java-collection/</guid>
      <description>&lt;h3 id=&#34;概述&#34;&gt;概述&lt;/h3&gt;

&lt;p&gt;集合框架是Java编码中最常用的知识点，本篇主要梳理一下Java集合框架，总结出各个常用的集合知识点。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Collection接口下有List、Set、Queue，三者都是接口&lt;/li&gt;
&lt;li&gt;Map是独立接口（与Collection是平级关系），下有Hashtable，LinkedHashMap，HashMap，TreeMap&lt;/li&gt;
&lt;li&gt;List下有ArrayList，Vector，LinkedList&lt;/li&gt;
&lt;li&gt;Set下有HashSet，LinkedHashSet，TreeSet&lt;/li&gt;
&lt;li&gt;Queue下有阻塞队列和非阻塞队列；堵塞队列中又分单端堵塞队列和双端堵塞队列&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>【java8】(三)stream 详细用法</title>
      <link>https://jasonqian10.github.io/post/java/java8-stream/</link>
      <pubDate>Mon, 06 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jasonqian10.github.io/post/java/java8-stream/</guid>
      <description>&lt;h3 id=&#34;概述&#34;&gt;概述&lt;/h3&gt;

&lt;p&gt;Stream 是 Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。使用Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。也可以使用 Stream API 来并行执行操作。简而言之，Stream API 提供了一种高效且易于使用的处理数据的方式。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【java8】(二)高大上的函数式接口怎么用</title>
      <link>https://jasonqian10.github.io/post/java/java8-function-interface/</link>
      <pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jasonqian10.github.io/post/java/java8-function-interface/</guid>
      <description>&lt;h2 id=&#34;函数式接口&#34;&gt;函数式接口&lt;/h2&gt;

&lt;p&gt;函数式接口(Functional Interface)是只有一个抽象方法的接口。这样一个函数接口其实就是一个函数，将函数式编程转换成对象操作。&lt;/p&gt;

&lt;p&gt;1)函数式接口中的抽象函数就是为了支持 lambda表达式；&lt;/p&gt;

&lt;p&gt;2)函数式接口可以被隐式转换为lambda表达式；&lt;/p&gt;

&lt;p&gt;3)为确保函数式接口符合语法，可以添加@FunctionalInterface注解；&lt;/p&gt;

&lt;p&gt;注意：加不加&lt;code&gt;@FunctionalInterface&lt;/code&gt;对于接口是不是函数式接口没有影响，该注解知识提醒编译器去检查该接口是否仅包含一个抽象方法。&lt;/p&gt;

&lt;p&gt;例外：&lt;/p&gt;

&lt;p&gt;函数式接口里是可以包含默认方法default method（函数式接口里是可以包含默认方法）；&lt;/p&gt;

&lt;p&gt;函数式接口里是可以包含静态方法（因为静态方法不能是抽象方法，是一个已经实现了的方法，无法被覆写）；&lt;/p&gt;

&lt;p&gt;函数式接口里是可以包含Object里的public方法，如equals()。&lt;/p&gt;

&lt;p&gt;下面介绍几种常用的函数式接口。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【java8】(一)lambda表达式你用对了吗？</title>
      <link>https://jasonqian10.github.io/post/java/java8-lambda/</link>
      <pubDate>Sun, 29 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jasonqian10.github.io/post/java/java8-lambda/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;

&lt;p&gt;Java8引入了lambda表达式。随着java8应用的越来越广，在我们开发过程中已经大量的在使用lambda表达式了，但是使用了并不说明你真正懂了lambda，离开idea的自动联想你能直接写出lambda表达式吗？&lt;/p&gt;

&lt;h2 id=&#34;lambda表达式语法&#34;&gt;lambda表达式语法&lt;/h2&gt;

&lt;h3 id=&#34;概念&#34;&gt;概念&lt;/h3&gt;

&lt;p&gt;可以把Lambda表达式理解为简洁的表示可传递的匿名函数(函数式接口)的一种方式：它没有名称，但它有参数列表，函数主体，返回类型，可能还有一个可以抛出的异常列表。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;lambda表达式依附于&lt;strong&gt;函数式接口&lt;/strong&gt;，可以理解为是函数式接口的匿名实现。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;函数式接口&lt;/strong&gt;后面会详细介绍。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Intellij idea搭建solr源码debug调试环境</title>
      <link>https://jasonqian10.github.io/post/solr-debug-idea-build/</link>
      <pubDate>Wed, 15 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jasonqian10.github.io/post/solr-debug-idea-build/</guid>
      <description>&lt;p&gt;solr源码debug环境对于研究solr和Lucene源码很有必要，本文总结本人搭建的详细步骤。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>搜索引擎中相似度算法TF-IDF和BM25</title>
      <link>https://jasonqian10.github.io/post/nlp-tf-idf-bm25/</link>
      <pubDate>Thu, 26 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jasonqian10.github.io/post/nlp-tf-idf-bm25/</guid>
      <description>前言 当我们使用搜索引擎时，它总是会把相关性高的内容显示在前面，相关性低的内容显示在后面。那么，搜索引擎是如何计算关键字和内容的相关性呢？这里</description>
    </item>
    
    <item>
      <title>【Hadoop索引】hadoop调优经验</title>
      <link>https://jasonqian10.github.io/post/mapreduce/mapreduce-index-3/</link>
      <pubDate>Sun, 22 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jasonqian10.github.io/post/mapreduce/mapreduce-index-3/</guid>
      <description>&lt;p&gt;【Hadoop索引】本篇系列第三篇。主要介绍Hadoop调试过程中的一些问题以及解决方法的总结。&lt;/p&gt;

&lt;p&gt;主要有以下几类问题&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;资源分配问题&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;性能调优问题&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Yarn框架运行机制问题&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Solr索引问题&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>【Hadoop索引】Mapreduce进行solr索引实战</title>
      <link>https://jasonqian10.github.io/post/mapreduce/mapreduce-index-2/</link>
      <pubDate>Fri, 06 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jasonqian10.github.io/post/mapreduce/mapreduce-index-2/</guid>
      <description>&lt;p&gt;【Hadoop索引】将介绍如何使用Hadoop框架进行solr索引。本篇系列第二篇，介绍如何应用Hadoop到solr index。&lt;/p&gt;

&lt;h2 id=&#34;为什么使用hadoop来做solr索引&#34;&gt;为什么使用Hadoop来做solr索引？&lt;/h2&gt;

&lt;p&gt;这与Hadoop特点有关，hadoop适用于处理大数据并行计算，提高solr索引速度。Hadoop的MapReduce计算框架分map阶段和reduce阶段。map阶段转换solr document，reduce阶段进行solr index操作。MapReduce流程契合solr索引的流程。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【Hadoop索引】我理解的hadoop</title>
      <link>https://jasonqian10.github.io/post/mapreduce/mapreduce-index-1/</link>
      <pubDate>Thu, 05 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jasonqian10.github.io/post/mapreduce/mapreduce-index-1/</guid>
      <description>&lt;p&gt;【Hadoop索引】将介绍如何使用Hadoop框架进行solr索引。本篇系列第一篇，介绍我学习使用Hadoop后对其的理解。&lt;/p&gt;

&lt;h2 id=&#34;hadoop概念&#34;&gt;Hadoop概念&lt;/h2&gt;

&lt;h3 id=&#34;官方概念&#34;&gt;官方概念&lt;/h3&gt;

&lt;p&gt;The Apache Hadoop software library is a framework that allows for the distributed processing of large data sets across clusters of computers using &lt;strong&gt;simple programming&lt;/strong&gt; &lt;strong&gt;models&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;总结：处理大数据、分布式集群、可编程计算框架&lt;/p&gt;

&lt;h3 id=&#34;hadoop-的核心组件&#34;&gt;Hadoop 的核心组件&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://jasonqian10.github.io/img/post/image-20191206112523725.png&#34; alt=&#34;image-20191206112523725&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Hadoop由1.0和2.0两个架构版本，2.0最大的变化就是引入YARN这个资源调度框架，更加精细化的分配和调度资源。这里主要以当前最新的2.0展开。感兴趣的同学可以自行了解一下两者差异。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;HDFS：分布式文件系统&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Mapreduce：分布式运算编程框架&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;YARN：运算资源调度系统&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;简单描述一下三者关系：自定义的MapReduce程序（Java进程），通过YARN框架分配资源来运行这个MapReduce程序，MapReduce程序中输出存储到HDFS。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>solr suggest实战</title>
      <link>https://jasonqian10.github.io/post/solr-suggest/</link>
      <pubDate>Fri, 15 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jasonqian10.github.io/post/solr-suggest/</guid>
      <description>&lt;h3 id=&#34;solr-suggest模块介绍&#34;&gt;solr suggest模块介绍&lt;/h3&gt;

&lt;p&gt;自动提示功能在现今的互联网产品中的应用几乎遍地都是。比如在京东主页搜索”苹果“，输入框下面就会自动联想出与苹果相关的关键词。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jasonqian10.github.io/img/post/image-20191116164420559.png&#34; alt=&#34;image-20191116164420559&#34; /&gt;&lt;/p&gt;

&lt;p&gt;本文我们主要就来讲一下solr是如何去实现这样的自动提示功能。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>solr搜索原理解析</title>
      <link>https://jasonqian10.github.io/post/solr-lucene-principle/</link>
      <pubDate>Fri, 18 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jasonqian10.github.io/post/solr-lucene-principle/</guid>
      <description>&lt;h3 id=&#34;solr与lucene的关系&#34;&gt;solr与Lucene的关系&lt;/h3&gt;

&lt;p&gt;讲搜索流程之前先介绍一下solr与Lucene的关系。&lt;/p&gt;

&lt;p&gt;Lucene是一个索引与搜索类库，而不是完整的程序。使用Lucene的方式主要有二种：一是自己编写程序，调用类库；二是使用第三方基于Lucene编写的程序，如下面介绍的Solr等。&lt;/p&gt;

&lt;p&gt;Solr 是一个开源的搜索服务器，Solr 使用 Java 语言开发，主要基于 HTTP 和 Apache Lucene 实现。Solr是在Lucene上封装的完善的搜索引擎。&lt;/p&gt;

&lt;p&gt;solr是门户，lucene是底层基础。通俗地说，如果Solr是汽车，那么Lucene就是发动机，没有发动机，汽车就没法运转，但对于用户来说只可开车，不能开发动机。&lt;/p&gt;

&lt;p&gt;solr搜索流程分solr部分和Lucene部分，整体流程是请求先经过solr部分再进入Lucene部分。
&lt;img src=&#34;https://jasonqian10.github.io/img/post/solr_lucene-1542234.png&#34; alt=&#34;solr_lucene&#34; style=&#34;zoom:40%;&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>关于我</title>
      <link>https://jasonqian10.github.io/about/</link>
      <pubDate>Mon, 01 Jun 2009 00:00:00 +0000</pubDate>
      
      <guid>https://jasonqian10.github.io/about/</guid>
      <description>一名普通的程序员~ 邮箱: jasonqian10@163.com</description>
    </item>
    
  </channel>
</rss>